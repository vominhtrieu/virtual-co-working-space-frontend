/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import {useEffect, useRef, useState} from 'react'
import {useGLTF, useAnimations} from '@react-three/drei'
import {GLTFActions, GLTFResult, useCustomGLTF} from "../../helpers/utilities";

type CharacterProps = JSX.IntrinsicElements['group'] & {
    hair: number,
    eyes: number,
}

export default function DisplayCharacter(props: CharacterProps) {
    const group = useRef<THREE.Group>()
    const {nodes, materials, animations} = useCustomGLTF('/models/Character.glb') as GLTFResult
    const {actions} = useAnimations<GLTFActions>(animations, group);
    useEffect(() => {
        actions.Idle?.play();
    }, [actions.Idle]);

    return (
        <>
            <mesh {...props}>
                <group ref={group} position={[0, -1, 0]} dispose={null}>
                    <primitive object={nodes.mixamorigHips}/>
                    <primitive object={nodes.Ctrl_ArmPole_IK_Left}/>
                    <primitive object={nodes.Ctrl_Hand_IK_Left}/>
                    <primitive object={nodes.Ctrl_ArmPole_IK_Right}/>
                    <primitive object={nodes.Ctrl_Hand_IK_Right}/>
                    <primitive object={nodes.Ctrl_Foot_IK_Left}/>
                    <primitive object={nodes.Ctrl_LegPole_IK_Left}/>
                    <primitive object={nodes.Ctrl_Foot_IK_Right}/>
                    <primitive object={nodes.Ctrl_LegPole_IK_Right}/>
                    <primitive object={nodes.Ctrl_Master}/>
                    {/* <skinnedMesh geometry={nodes.Cube001.geometry} material={materials.Body}
                                 skeleton={nodes.Cube001.skeleton}/>
                    <skinnedMesh geometry={nodes.Cube001_1.geometry} material={materials.Head}
                                 skeleton={nodes.Cube001_1.skeleton}/> */}
                    <skinnedMesh geometry={nodes.Cube006.geometry} material={materials.Body}
                                 skeleton={nodes.Cube006.skeleton}/>
                    <skinnedMesh geometry={nodes.Cube006_1.geometry} material={materials.Head}
                                 skeleton={nodes.Cube006_1.skeleton}/>
                    <skinnedMesh geometry={nodes.Cube006_2.geometry} material={materials.Eye}
                                 skeleton={nodes.Cube006_2.skeleton}/>
                    {/* <skinnedMesh
                        geometry={nodes.Cube001_2.geometry}
                        material={props.eyes === 1 ? materials["Eye 1"] : materials["Eye 2"]}
                        skeleton={nodes.Cube001_2.skeleton}
                    /> */}
                    {props.hair === 1 ? (
                        <skinnedMesh
                            geometry={nodes.Hair_1.geometry}
                            material={materials["Hair_1"]}
                            skeleton={nodes.Hair_1.skeleton}
                        />
                    ) : (
                        <skinnedMesh
                            geometry={nodes.Hair_2.geometry}
                            material={materials["Hair_2"]}
                            skeleton={nodes.Hair_2.skeleton}
                        />
                    )}
                    <skinnedMesh geometry={nodes.Shoe.geometry} material={materials.Shoes}
                                 skeleton={nodes.Shoe.skeleton}/>
                </group>
            </mesh>
        </>
    )
}

useGLTF.preload('/Character.glb')
