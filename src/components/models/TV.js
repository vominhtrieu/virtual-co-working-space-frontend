/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef, useState } from 'react';
import * as THREE from "three";
import { useCustomGLTF } from '../../helpers/utilities';

export default function Model(props) {
  const group = useRef();
  const { nodes, materials } = useCustomGLTF('/models/TV.glb');
  const [stream, setStream] = useState(null);

  const shareScreen = () => {
    if (props.action === "config")
      return;
    navigator.mediaDevices.getDisplayMedia({
      video: {
        width: 1920,
        height: 1080,
      },
      audio: false,
    }).then((stream) => {
      setStream(stream);
    });
  }

  const videoTexture = useMemo(() => {
    if (!stream) {
      return null;
    }

    const selfVideo = document.createElement("video");
    selfVideo.muted = true;
    selfVideo.srcObject = stream;
    selfVideo.addEventListener("loadedmetadata", () => {
      selfVideo.play();
    });
    return new THREE.VideoTexture(selfVideo);
  }, [stream])
  if (videoTexture)
    materials.Material.map = videoTexture;

  const material = new THREE.MeshBasicMaterial({ color: 0xffffff, map: videoTexture });
  return (
    <group ref={group} {...props}>
      <mesh geometry={nodes.Cube_1.geometry} material={materials.Border} />
      <mesh geometry={nodes.Cube_2.geometry} material={material} onDoubleClick={shareScreen} />
    </group>
  )
}